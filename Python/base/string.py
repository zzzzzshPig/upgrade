"""测试字符串"""
STR1 = 'hello python'

# 续行
print('line1 \
    line2')

# 转义
print("\\")

# 响铃 系统控制台中才可以响
print('\a')

# 退格
print('hello \b world')

# 空 好像不是空格
print('1\0001\0001')

# 回车，将 \r 后面的内容移到字符串开头，并逐一替换开头部分的字符，直至将 \r 后面的内容完全替换完成。
print("Hello\rWorld!")

# 八进制 \yyy y 代表 0~7 的字符，例如：\012 代表换行
print("\110\145\154\154\157\40\127\157\162\154\144\41")

# 十六进制 以 \x 开头，y 代表的字符，例如：\x0a 代表换行
print("\x48\x65\x6c\x6c\x6f\x20\x57\x6f\x72\x6c\x64\x21")

# * 运算
print('xiatiao' * 2)

# [] 截取运算
print(STR1[0:len(STR1):2])

# in 运算
print('h' in STR1, 'a' in STR1)

# not in 运算
print('h' not in STR1, 'a' not in STR1)

# r/R 所有的字符串都是直接按照字面的意思来使用，没有转义特殊或不能打印的字符
print(r'1\n2\n3\n4')

# %(x) 格式字符串
'''
%c	 格式化字符及其ASCII码
%s	 格式化字符串
%d	 格式化整数
%u	 格式化无符号整型
%o	 格式化无符号八进制数
%x	 格式化无符号十六进制数
%X	 格式化无符号十六进制数（大写）
%f	 格式化浮点数字，可指定小数点后的精度
%e	 用科学计数法格式化浮点数
%E	 作用同%e，用科学计数法格式化浮点数
%g	 %f和%e的简写
%G	 %f 和 %E 的简写
'''
print('%s' % (STR1))  # hello python
print('%c' % (72))  # H
print('%d' % (123.123))  # 123
print('%u' % (+123.123))  # 123
print('%o' % (72))  # 110
print('%x' % (15))  # f
print('%X' % (15))  # F
print('%0.2f' % (15))  # 15.00
print('%e' % (123.1023))  # 1.231023e+02
print('%E' % (123.1023))  # 1.231023E+02
print('%0.2g' % (123.1023))  # 1.2e+02
print('%0.2G' % (123.1023))  # 1.2E+02

# 三引号 ''' / """
print("""这是一个多行字符串的实例
多行字符串可以使用制表符
TAB ( \t )。
也可以使用换行符 [ \n ]。
""")

# f'' 字符串模版
print(f'{STR1} ', f'{1+2=}')

# 在Python3中，所有的字符串都是Unicode字符串
print('👋')
